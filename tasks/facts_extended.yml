---

- name: Gather extended facts
  block:
    - name: Get ansible users shadow password information
      bootstrap_shadow_facts:
        usernames:
          - "{{ bootstrap_ansible_user_to_update }}"
          - "{{ bootstrap_ansible_become_user_to_update }}"
      register: bootstrap_get_shadows_result
      vars:
        ansible_user: "{{ bootstrap_ansible_user }}"
        ansible_password: "{{ bootstrap_ansible_password }}"
        ansible_become: "{{ bootstrap_become | default(false) }}"
        ansible_become_method: "{{ bootstrap_become_method | default('su') }}"
        ansible_become_user: "{{ bootstrap_become_user | default('root') }}"
        ansible_become_pass: "{{ bootstrap_become_pass | default('') }}"
        ansible_ssh_common_args: "{{ bootstrap_ansible_ssh_common_args }}"
        ansible_python_interpreter: >-
          {{ bootstrap_ansible_python_interpreter
             | default(
                 (bootstrap_distribution_version | string is version("8", "<"))
                 | ternary("/usr/bin/python",
                           "/usr/bin/python3")) }}
      no_log: "{{ bootstrap_no_log | bool }}"

    - name: Setup facts indicating if ansible user must be updated
      ansible.builtin.set_fact:
        bootstrap_ansible_user_needs_update: >-
          {{ not ansible_user in shadows.keys() | list
             or not ansible_password
                 is bootstrap_shadow_match(shadows[ansible_user]) }}

    - name: Setup facts indicating ansible become user must be updated
      ansible.builtin.set_fact:
        bootstrap_ansible_become_user_needs_update: >-
          {{ not ansible_become_user in shadows.keys() | list
             or not ansible_become_pass
                 is bootstrap_shadow_match(shadows[ansible_become_user]) }}
  vars:
    shadows: "{{ bootstrap_get_shadows_result.shadows }}"
  tags:
    - role::bootstrap
    - role::bootstrap::facts
